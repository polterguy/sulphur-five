
/*
 * Invoked when a file is uploaded to the server.
 *
 * Expects the HTTP request to be of type "multipart/form-data" and that the file
 * can be found as HTTP POST parameter "file".
 *
 * Optionally, it also expects an HTTP POST parameter called "batch-id".
 * If no "batch-id" POST parameter is given, a randomly generated GUID will
 * be automatically created, and associated with the upload, as its "batch-id".
 *
 * The "batch-id" allows for uploading multiple files, that are somehow related.
 *
 * Will return either "SUCCESS" or "ERROR" to caller, depending upon whether or
 * not the file was successfully accepted or not.
 */





/*
 * Verifying user is allowed to upload files.
 */
whoami
select-data:x:/*/*/sulphur.settings
if:x:/@select-data/*/*/uploaders?value
  =:all
  or:x:/@select-data/*/*/uploaders?value
    =:users
    and:x:/@whoami/*/default?value
      not
  or:x:/@whoami/*/role?value
    =:root

  /*
   * Somehow, user is allowed to upload files to server.
   *
   * Retrieving file's content, and saving it to correct folder.
   */
  p5.web.request.parse-mime
    attachment-folder:~/documents/private/

  /*
   * Retrieving "batch-id", and automatically creating a random GUID,
   * if no "batch-id" was specified.
   */
  _batch-id
  if:x:@"/@p5.web.request.parse-mime/*/*/text/=plain/*/Content-Disposition/@""=~name=""""batch-id"""""""

    /*
     * We found a "batch-id" in HTTP POST request.
     */
    set:x:/@_batch-id?value
      src:x:@"/@p5.web.request.parse-mime/*/*/text/=plain/*/Content-Disposition/@""=~name=""""batch-id""""""/./*/content?value"

  else

    /*
     * There was no "batch-id" HTTP POST argument in request.
     */
    set:x:/@_batch-id?value
      p5.types.guid.new

  /*
   * Figuring out SHA value of file, to avoid inserting same file multiple times.
   */
  p5.crypto.hash.create-sha1-file:{0}{1}{2}
    :x:/@p5.web.request.parse-mime/**/filename/[0,1]/*/folder?value
    :x:/@p5.web.request.parse-mime/**/filename/[0,1]/*/prefix?value
    :x:/@p5.web.request.parse-mime/**/filename/[0,1]?value
    hex:true

  /*
   * Inserting entry into database.
   */
  p5.mysql.connect:[sulphur]

    /*
     * Checking if there exists a file with the same SHA value from before, 
     * at which point we don't insert the file.
     */
    p5.mysql.scalar:@"select count(*) from files where sha = @sha"
      @sha:x:/@p5.crypto.hash.create-sha1-file?value
    if:x:/@p5.mysql.scalar?value.int
      !=:int:0

      /*
       * File already exists in system.
       */
      delete-file:{0}{1}{2}
        :x:/@p5.web.request.parse-mime/**/filename/[0,1]/*/folder?value
        :x:/@p5.web.request.parse-mime/**/filename/[0,1]/*/prefix?value
        :x:/@p5.web.request.parse-mime/**/filename/[0,1]?value

      /*
       * Returning "ERROR" to caller.
       *
       * Notice, we don't return what type of error, since that could be a security
       * concern.
       */
      return:ERROR

    /*
     * Doing the actual insertion of file.
     */
    p5.mysql.insert:@"insert into files (filename, prefix, username, name, description, type, sha, batchid) values(@filename, @prefix, @username, @name, @description, 'private', @sha, @batchid)"
      @filename:x:/@p5.web.request.parse-mime/**/filename/[0,1]?value
      @prefix:x:/@p5.web.request.parse-mime/**/filename/[0,1]/*/prefix?value
      @username:x:/@whoami/*/username?value
      @name:x:/@p5.web.request.parse-mime/**/filename/[0,1]?value
      @description:
      @sha:x:/@p5.crypto.hash.create-sha1-file?value
      @batchid:x:/@_batch-id?value

    /*
     * Return "SUCCESS" to caller.
     */
    return:SUCCESS

else

  /*
   * User is not allowed to upload file, returning "ERROR" to caller.
   *
   * Notice, we don't give any error information about what went wrong, since
   * that would give a potential adversary meta information, he could use to
   * extract information about the system's state.
   */
  return:ERROR
