
/*
 * File responsible for databinding files in the main grid.
 *
 * Requires no arguments, but you can optionally pass in [offset] and [filter] when invoking file,
 * to start out at a specific page, with a specified filter condition.
 *
 * Notice, optionally pass in [more] and set its value to the database ID of from
 * where you wish to start fetching more items from, and rather "append" to grid,
 * instead of clearing old items, and re-populating grid.
 */
.defaults
  offset:int:0





/*
 * Sanity checking optional arguments.
 */
micro.lambda.contract.optional:x:/..
  offset:long
  filter:string





/*
 * Checking if a filter was provided, and if so, adding a "where" clause to 
 * our SQL statement.
 */
_filter
if:x:/../*/filter?value

  /*
   * Filter was supplied, making sure we use it.
   */
  set:x:/@_filter?value
    src:"and (username = @exact or name like @filter or description like @filter or filename like @filter or sha = @exact)"
  eval-x:x:/+/*/*
  add:x:/../*/p5.mysql.connect/*/p5.mysql.select
    src
      @filter:"%{0}%"
        :x:/../*/filter?value
      @exact:"{0}"
        :x:/../*/filter?value





/*
 * Making sure we allow only for viewing files that the user actually has access to.
 *
 * Notice, a user has access to all of his own files, in addition to all public
 * and protected files.
 *
 * The exception is a "guest", which only has access to public files.
 */
whoami
_where
if:x:/@whoami/*/default?value

  /*
   * User is guest, making sure he only has access to public files.
   */
  set:x:/@_where?value
    src:"type = 'public'"

else-if:x:/@whoami/*/role?value
  =:root

  /*
   * User is root.
   *
   * Hence giving him access to all "protected" files, in addition to all of user's
   * own files, and all of guest's files, including guest's private files.
   */
  set:x:/@_where?value
    src:"(username = @username or username = 'guest' or type = 'protected' or type = 'public')"
  add:x:/../*/p5.mysql.connect/*/p5.mysql.select
    src
      @username:x:/@whoami/*/username?value

else

  /*
   * User is not guest, but an actual logged in user.
   *
   * Hence giving him access to also "protected" files, in addition to all of user's
   * own files.
   */
  set:x:/@_where?value
    src:"(username = @username or type = 'protected' or type = 'public')"
  add:x:/../*/p5.mysql.connect/*/p5.mysql.select
    src
      @username:x:/@whoami/*/username?value





/*
 * Checking if caller requested [more] items, instead of re-binding grid.
 */
_more
if:x:/../*/more?value

  /*
   * This is a grid "feed operation", and we should not clear the grid, but rather
   * feed it with more data.
   */
  set:x:/@_more?value
    src:"and id < @more"
  add:x:/../*/p5.mysql.connect/*/p5.mysql.select
    src
      @more:x:/../*/more?value





/*
 * Parsing URL, such that we can figure out what types of files the client
 * wants to display.
 */
_who
p5.web.get-location-url
p5.web.get-root-location
replace:x:/@p5.web.get-location-url?value
  src:x:/@p5.web.get-root-location?value
split:x:/@replace?value
  =:/





/*
 * Storing the app's "root" URL for later references, to allow us to create relative
 * URLs and hyperlinks.
 */
_app-root-url
p5.io.unroll-path:@SULPHUR/
split:x:/-?value
  =:/
set:x:/@_app-root-url?value
  src:/{0}/
    :x:/@split/0/-?name





/*
 * Checking if we should only show items belonging to a specific user.
 */
if:x:/../*/split/[0,1]/1?name
  =:user

  /*
   * Client wants to only see files belonging to a specific user.
   */
  set:x:/@_who?value
    src:"and username = @username2"
  add:x:/../*/p5.mysql.connect/*/p5.mysql.select
    src
      @username2:x:/../*/split/[0,1]/2?name





/*
 * Checking if we should only show items belonging to a specific batch upload.
 */
_batch
if:x:/../*/split/[0,1]/1?name
  =:batch

  /*
   * Client wants to filter away all files not belonging to a specific user.
   */
  set:x:/@_batch?value
    src:"and batchid = @batch"
  add:x:/../*/p5.mysql.connect/*/p5.mysql.select
    src
      @batch:x:/../*/split/[0,1]/2?name





/*
 * Checking if we should only show the file matching the given SHA1.
 */
_sha
if:x:/../*/split/[0,1]/1?name
  =:sha

  /*
   * Client wants to view only file matching specified SHA1 value.
   */
  set:x:/@_sha?value
    src:"and sha = @sha"
  add:x:/../*/p5.mysql.connect/*/p5.mysql.select
    src
      @sha:x:/../*/split/[0,1]/2?name





/*
 * Connecting to database and selecting available files for user.
 */
p5.mysql.connect:[sulphur]
  p5.mysql.select:@"select * from files where {0} {1} {2} {3} {4} {5} order by id desc limit 10 offset @offset"
    :x:/@_where?value
    :x:/@_filter?value
    :x:/@_more?value
    :x:/@_who?value
    :x:/@_batch?value
    :x:/@_sha?value
    @offset:x:(/../*/offset|/../*/.defaults/*/offset)/$?value.int

  /*
   * Making sure we display "end of dataset ruler" if we are at end of dataset,
   * and it doesn't exist from before.
   */
  if:x:/@p5.mysql.select/*?count.int
    <:int:10
    and
      fetch:x:/0/0?value
        widget-exists:sulphur-at-end-of-dataset
      not

    /*
     * "End of dataset ruler" does not exist, and we are at the end of our dataset,
     * hence creating a visual clue, signaling that we're at the end of dataset,
     * in addition to signaling to JavaScript logic, that it shouldn't try to 
     * fetch more items.
     */
    create-widget:sulphur-at-end-of-dataset
      parent:sulphur-main-container
      element:hr
    create-widget:sulphur-at-end-of-dataset-home
      parent:sulphur-main-container
      element:a
      class:sulphur-home-link
      href:x:/@_app-root-url?value
      innerValue:See all files
    p5.web.send-javascript:"p5.sulphur_end_of_dataset = true;"

  else-if:x:/@p5.mysql.select/*?count.int
    >=:int:10
    and
      fetch:x:/0/0?value
        widget-exists:sulphur-at-end-of-dataset

    /*
     * "End of dataset ruler" exists, and there are possibly more items,
     * hence we delete our visual clue, and signal to our JavaScript "feeder"
     * logic that it should attempt to retrieve more items when user is at bottom
     * of page.
     */
    delete-widget:sulphur-at-end-of-dataset
    delete-widget:sulphur-at-end-of-dataset-home
    p5.web.send-javascript:"p5.sulphur_end_of_dataset = false;"

  /*
   * Storing the ID of the last record we fetched in ViewState, in case there
   * comes another request for "more" items later, at which point we extract
   * the last ID, and select files from that point and onwards.
   */
  p5.web.viewstate.set:sulphur.last-file-id
    src:x:/@p5.mysql.select/0/-/*/id?value

  /*
   * Looping through each result from above, and creating one widget for each result.
   */
  for-each:x:/@p5.mysql.select/*

    /*
     * Making sure we transform the description of file from Markdown to HTML.
     *
     * TODO: Validate HTML for Markdown HTML malicious tag injection!
     */
    markdown2html:x:/@_dp/#/*/description?value

    /*
     * Nicely formatting date.
     */
    p5.types.date.format:x:/@_dp/#/*/uploaded?value
      format:"ddd d. MMM yyyy - HH:mm"

    /*
     * Figuring out file size.
     *
     * However, before we can figure out the file's size, we'll need to figure
     * out its exact location, which varies according to who owns the file, and
     * which type of protection the file has.
     */
    _folder
    if:x:/@_dp/#/*/username?value
      =:guest

      /*
       * Guests can only have private files.
       */
      set:x:/@_folder?value
        src:/common/documents/private/

    else

      /*
       * Need to figure out type of file.
       */
      switch:x:/@_dp/#/*/type?value
        case:private
          set:x:/@_folder?value
            src:~/documents/private/
        case:protected
          set:x:/@_folder?value
            src:/common/documents/private/
        case:public
          set:x:/@_folder?value
            src:/common/documents/public/

    /*
     * Now we know which folder file is in, and we can retrieve its size.
     */
    _length
    p5.io.file.get-length:{0}{1}{2}
      :x:/@_folder?value
      :x:/@_dp/#/*/prefix?value
      :x:/@_dp/#/*/filename?value

    /*
     * Dividing file size by 1024 to figure out KB size of file.
     */
    set:x:/@_length?value
      /:x:/@p5.io.file.get-length/*?value.decimal
        _:decimal:1024

    /*
     * Notice, we don't display the date, unless user is actually logged in, but
     * mask it, to avoid giving away meta information about where the file might have
     * originally surfaced initially.
     *
     * Hence, the date property of the file is actually "protected information".
     */
    if:x:/@whoami/*/default?value
      set:x:/@p5.types.date.format?value
        src:"XXX"

    /*
     * Forward evaluating [add] invocations arguments, and adding a widget into
     * [create-widgets] invocation below, for creating a widget wrapping file information.
     */
    eval-x:x:/+/**/widgets/=databound/*/*(/innerValue|/href|/widgets/*/h3/*/innerValue)|/+/**(/_id|/_sha|/_app-root-url)
    add:x:/..p5.mysql.connect/*/create-widgets
      src

        /*
         * Actual wrapper for entire file widget.
         */
        container
          parent:sulphur-files-grid
          class:col-100
          widgets
            container
              class:sulphur-file-item rounded shaded air-inner
              _id:x:/@_dp/#/*/id?value
              events

                /*
                 * Invoked when a file has been deleted.
                 *
                 * Requires file's database ID as [_arg].
                 */
                sulphur.files.delete

                  /*
                   * Checking if invocation is for this particular widget.
                   */
                  get-widget-property:x:/../*/_event?value
                    _id
                  if:x:/@get-widget-property/*/*?value.string
                    !=:x:/../*/_arg?value.string

                    /*
                     * Not our guy.
                     */
                    return

                  /*
                   * Deleting widget from grid.
                   */
                  p5.web.widgets.get-parent:x:/../*/_event?value
                  delete-widget:x:/-/*/*?value

                /*
                 * Invoked when file's properties have changed.
                 *
                 * Requires file's database ID as [_arg].
                 */
                sulphur.files.update

                  /*
                   * Checking if invocation is for this particular widget.
                   */
                  get-widget-property:x:/../*/_event?value
                    _id
                  if:x:/@get-widget-property/*/*?value.string
                    !=:x:/../*/_arg?value.string

                    /*
                     * Not our guy.
                     */
                    return

                  /*
                   * Retrieving new data from database, and updating widgets
                   * accordingly.
                   */
                  p5.mysql.connect:[sulphur]
                    p5.mysql.select:@"select * from files where id = @id"
                      @id:x:/@get-widget-property/*/*?value

                    /*
                     * Finding description widget, transforming description to
                     * to HTML, and updating its value.
                     *
                     * TODO: Make sure Markdown invocation does not allow for 
                     * malicious HTML injection.
                     */
                    markdown2html:x:/@p5.mysql.select/*/*/description?value
                    p5.web.widgets.find-first:x:/../*/_event?value
                      class:sulphur-file-description
                    set-widget-property:x:/-/*/*?value
                      innerValue:x:/@markdown2html?value

                    /*
                     * Finding name widget, and changing its value accordingly.
                     */
                    p5.web.widgets.find-first:x:/../*/_event?value
                      class:sulphur-file-name
                    set-widget-property:x:/-/*/*?value
                      innerValue:x:/@p5.mysql.select/*/*/name?value

                    /*
                     * Finding meta owner widget, and changing its value accordingly.
                     */
                    p5.web.widgets.find-first:x:/../*/_event?value
                      class:sulphur-meta-owner
                    set-widget-property:x:/-/*/*?value
                      innerValue:"{0} ({1})"
                        :x:/@p5.mysql.select/*/*/username?value
                        :x:/@p5.mysql.select/*/*/type?value

              widgets:databound

                /*
                 * Hyperlink to file that displays its name.
                 *
                 * Not filename, but friendly "header" for file that is.
                 */
                a
                  href:{0}sha/{1}
                    :x:/@_app-root-url?value
                    :x:/@_dp/#/*/sha?value
                  widgets
                    h3
                      class:sulphur-file-name
                      innerValue:x:/@_dp/#/*/name?value

                /*
                 * Meta information username, protection, etc.
                 */
                div
                  class:sulphur-meta
                  widgets:databound
                    span
                      innerValue:"Owner; "
                    a
                      class:sulphur-meta-owner
                      innerValue:"{0} ({1})"
                        :x:/@_dp/#/*/username?value
                        :x:/@_dp/#/*/type?value
                      href:"{0}user/{1}"
                        :x:/@_app-root-url?value
                        :x:/@_dp/#/*/username?value
                    span
                      innerValue:" - "
                    a
                      class:sulphur-meta-batch
                      innerValue:batch
                      href:"{0}batch/{1}"
                        :x:/@_app-root-url?value
                        :x:/@_dp/#/*/batchid?value
                    br
                    a
                      class:sulphur-meta-sha
                      innerValue:Sha1 {0}
                        :x:/@_dp/#/*/sha?value
                      href:"{0}sha/{1}"
                        :x:/@_app-root-url?value
                        :x:/@_dp/#/*/sha?value
                    span
                      innerValue:"<br/>Filename; '{2}' - Uploaded; {1} - {0:n0}KB"
                        :x:/@_length?value
                        :x:/@p5.types.date.format?value
                        :x:/@_dp/#/*/filename?value

                /*
                 * Download file hyperlink.
                 */
                a
                  class:sulphur-download-file
                  innerValue:@"<span class=""icon-download""></span>"
                  title:Download file ...
                  oninit

                    /*
                     * Changing [href] of widget to allow downloading of file.
                     */
                    _sha:x:/@_dp/#/*/sha?value
                    _app-root-url:x:/@_app-root-url?value
                    set-widget-property:x:/../*/_event?value
                      href:{0}download/{1}
                        :x:/@_app-root-url?value
                        :x:/@_sha?value


                /*
                 * Edit file widget, only visible if user is root, or file belongs
                 * to currently logged in user.
                 */
                a
                  href:#
                  role:button
                  class:sulphur-edit-file
                  innerValue:@"<span class=""icon-pencil""></span>"
                  title:Edit file ...
                  oninit

                    /*
                     * Forward evaluated above.
                     */
                    _id:x:/@_dp/#/*/id?value

                    /*
                     * Verifying user is allowed to editing file, and if not,
                     * simply removing widget.
                     */
                    whoami
                    if:x:/@whoami/*/default?value
                      =:guest

                      /*
                       * Guests are never allowed to edit files.
                       */
                      delete-widget:x:/../*/_event?value
                      return

                    if:x:/@whoami/*/role?value
                      !=:root

                      /*
                       * User is not root, therefor we must check if user is the
                       * owner of the file, and if not, we don't allow him to edit
                       * the file.
                       */
                      p5.mysql.connect:[sulphur]
                        p5.mysql.scalar:@"select username from files where id = @id"
                          @id:x:/@_id?value
                        if:x:/@p5.mysql.scalar?value
                          !=:x:/@whoami/*/username?value

                          /*
                           * User does not own file, deleting widget, and returning
                           * early.
                           */
                          delete-widget:x:/../*/_event?value
                          return

                  onclick

                    /*
                     * Invoking file responsible for allowing user to edit file.
                     */
                    _id:x:/@_dp/#/*/id?value
                    eval-x:x:/+/*
                    micro.evaluate.file:@SULPHUR/handle-files/edit-file.hl
                      id:x:/@_id?value

                /*
                 * Description for file.
                 */
                div
                  class:sulphur-file-description
                  innerValue:x:/@markdown2html?value

  /*
   * Clearing widget's old content, and re-databinding files grid.
   *
   * Notice, we only clear old content if [keep-old] is not given, or has a false
   * value.
   */
  if:x:/../*/more?value
    not

    /*
     * No [more] argument, clearing out old files from grid.
     */
    clear-widget:sulphur-files-grid

    /*
     * Checking if we should display who these files belongs to 
     * (if dataset is filtered for a specific user that is).
     *
     * Or if we're viewing a "batch" of files.
     */
    if:x:/../*/split/[0,1]/1?name
      =:user

      /*
       * Making sure we display which user these files comes from.
       */
      create-widget
        parent:sulphur-files-grid
        style:"margin-left:auto;margin-right:auto;margin-bottom:3rem;"
        element:h1
        innerValue:{0}'s files
          :x:/../*/p5.mysql.connect/*/p5.mysql.select/*/*/username?value

    else-if:x:/../*/split/[0,1]/1?name
      =:batch

      /*
       * Making sure we display the fact that these files belongs to the same batch,
       * and when it was uploaded, and by whom.
       */
      create-widget
        parent:sulphur-files-grid
        style:"margin-left:auto;margin-right:auto;margin-bottom:3rem;"
        element:h1
        innerValue:Batch uploaded by {0}
          :x:/../*/p5.mysql.connect/*/p5.mysql.select/*/*/username?value

    else-if:x:/../*/split/[0,1]/1?name
      =:sha

      /*
       * Making sure we display the the SHA value for file, as an H1 header,
       * to create some search engine optimization (SEO) to allow for searching
       * for a file, at another location - In case server where file originally
       * was published is taken down for some reasons.
       */
      create-widget
        parent:sulphur-files-grid
        style:"margin-left:auto;margin-right:auto;margin-bottom:3rem;"
        element:h3
        innerValue:{0}
          :x:/../*/p5.mysql.connect/*/p5.mysql.select/*/*/sha?value

      /*
       * To create some further SEO feature, in addition to setting the page's title,
       * we also set the title to the file's SHA1 value.
       *
       * Notice, these types of features might seem weird for the uninitiated, but
       * it allows people to search for files, according to their SHA1 values, which
       * allows them to find the same file, at different locations, if the file
       * for some reasons is taken down from one server.
       */
      p5.web.page.set-title:{0} - {1}
        :x:/../*/p5.mysql.connect/*/p5.mysql.select/*/*/name?value
        :x:/../*/p5.mysql.connect/*/p5.mysql.select/*/*/sha?value

  /*
   * Creating widgets for each file.
   */
  create-widgets
